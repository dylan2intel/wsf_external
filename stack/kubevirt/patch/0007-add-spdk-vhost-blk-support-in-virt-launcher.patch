From 1bcdf2d37f96d6c1579c464e8daa232e1d68185a Mon Sep 17 00:00:00 2001
From: "Michael,Zhang" <michael.m.zhang@intel.com>
Date: Fri, 2 Sep 2022 21:56:52 +0800
Subject: [PATCH 07/22] add spdk-vhost-blk support in virt-launcher

---
 pkg/util/util.go                              |  22 ++++
 .../virtwrap/converter/converter.go           | 113 +++++++++++++++++-
 2 files changed, 133 insertions(+), 2 deletions(-)

diff --git a/pkg/util/util.go b/pkg/util/util.go
index 942fba1a1..5bf66cdcc 100644
--- a/pkg/util/util.go
+++ b/pkg/util/util.go
@@ -185,3 +185,25 @@ func CanBeNonRoot(vmi *v1.VirtualMachineInstance) error {
 func MarkAsNonroot(vmi *v1.VirtualMachineInstance) {
 	vmi.Status.RuntimeUser = 107
 }
+
+// Check if a VMI spec requests vhostuser interface
+func IsVhostuserVmiSpec(spec *v1.VirtualMachineInstanceSpec) bool {
+	// for _, iface := range spec.Domain.Devices.Interfaces {
+	// 	if iface.Vhostuser != nil {
+	// 		return true
+	// 	}
+	// }
+	// return false
+
+	//For spdk vhost support, re-visit
+	spdkVhostTag := "/var/tmp/vhost.tag" //If the tag is exist, then support the spdk vhost.
+	logger := log.DefaultLogger()
+	if _, err := os.Stat(spdkVhostTag); os.IsNotExist(err) {
+		logger.Infof("SPDK vhost is not enabeled, please create the tag[%s]to support SPDK vhost in kubevirt.", spdkVhostTag)
+		return false
+	} else if err == nil {
+		logger.Infof("SPDK vhost tag[%s] is exist, support SPDK vhost in kubevirt.", spdkVhostTag)
+		return true
+	}
+	return false
+}
diff --git a/pkg/virt-launcher/virtwrap/converter/converter.go b/pkg/virt-launcher/virtwrap/converter/converter.go
index bb5f8197b..e28af8670 100644
--- a/pkg/virt-launcher/virtwrap/converter/converter.go
+++ b/pkg/virt-launcher/virtwrap/converter/converter.go
@@ -39,9 +39,8 @@ import (
 
 	"kubevirt.io/kubevirt/pkg/virt-launcher/virtwrap/converter/vcpu"
 
-	"kubevirt.io/kubevirt/pkg/virt-controller/watch/topology"
-
 	"kubevirt.io/kubevirt/pkg/virt-controller/services"
+	"kubevirt.io/kubevirt/pkg/virt-controller/watch/topology"
 
 	k8sv1 "k8s.io/api/core/v1"
 
@@ -1363,6 +1362,7 @@ func Convert_v1_VirtualMachineInstance_To_api_Domain(vmi *v1.VirtualMachineInsta
 
 	var isMemfdRequired = false
 	if vmi.Spec.Domain.Memory != nil && vmi.Spec.Domain.Memory.Hugepages != nil {
+		log.Log.Object(vmi).Info("config memorybacking...")
 		domain.Spec.MemoryBacking = &api.MemoryBacking{
 			HugePages: &api.HugePages{},
 		}
@@ -1714,6 +1714,55 @@ func Convert_v1_VirtualMachineInstance_To_api_Domain(vmi *v1.VirtualMachineInsta
 				return err
 			}
 		}
+		if util.IsVhostuserVmiSpec(&vmi.Spec) {
+			// Shared memory required for vhostuser interfaces
+			logger := log.DefaultLogger()
+
+			// Set file as memory backend for spdk vhost support
+			domain.Spec.MemoryBacking.Source = &api.MemoryBackingSource{Type: "file"}
+			// NUMA is required in order to use file
+			domain.Spec.CPU.NUMA = &api.NUMA{
+				Cells: []api.NUMACell{
+					{
+						ID:     "0",
+						CPUs:   fmt.Sprintf("0-%d", domain.Spec.VCPU.CPUs-1),
+						Memory: uint64(vcpu.GetVirtualMemory(vmi).Value() / int64(1024)),
+						Unit:   "KiB",
+					},
+				},
+			}
+
+			logger.Info("Config the memory for vhost user interface.")
+			if vmi.Spec.Domain.Memory == nil || vmi.Spec.Domain.Memory.Hugepages == nil {
+				return fmt.Errorf("Hugepage is required for vhostuser interface to add NUMA cells %v", vmi.Spec.Domain.Memory)
+			}
+			if domain.Spec.Memory.Value == 0 {
+				return fmt.Errorf("Valid memory is required for vhostuser interface to add NUMA cells")
+			}
+
+			domain.Spec.CPU.NUMA = &api.NUMA{}
+			sockets := domain.Spec.CPU.Topology.Sockets
+			cellMemory := domain.Spec.Memory.Value / uint64(sockets)
+			nCPUsPerCell := uint32(vcpus) / sockets
+
+			logger.Infof("Cpu NUMA: '%d'. CPU sockets: %d. memory: %d.", nCPUsPerCell, sockets, cellMemory)
+
+			var idx uint32
+			for idx = 0; idx < sockets; idx++ {
+				start := idx * nCPUsPerCell
+				end := start + nCPUsPerCell - 1
+				cellCPUs := strconv.Itoa(int(start)) + "-" + strconv.Itoa(int(end))
+				cell := api.NUMACell{
+					ID:           fmt.Sprintf("%d", idx),
+					CPUs:         cellCPUs,
+					Memory:       cellMemory,
+					Unit:         domain.Spec.Memory.Unit,
+					MemoryAccess: "shared",
+				}
+				domain.Spec.CPU.NUMA.Cells = append(domain.Spec.CPU.NUMA.Cells, cell)
+			}
+		}
+
 	}
 
 	domain.Spec.Devices.HostDevices = append(domain.Spec.Devices.HostDevices, c.GenericHostDevices...)
@@ -1832,6 +1881,66 @@ func Convert_v1_VirtualMachineInstance_To_api_Domain(vmi *v1.VirtualMachineInsta
 		}
 	}
 
+	//For spdk vhost support, re-visit
+	spdkVhostTag := "/var/tmp/vhost.tag" //If the tag is exist, then support the spdk vhost.
+	spdkVhostPath := "/var/tmp/vhost.0"
+	spdkVhostPath1 := "/var/tmp/vhost.1"
+	//	if _, err := os.Stat(spdkVhostTag); os.IsNotExist(err) {
+	if util.IsVhostuserVmiSpec(&vmi.Spec) {
+		if _, err := os.Stat(spdkVhostPath); os.IsNotExist(err) {
+			logger := log.DefaultLogger()
+			logger.Infof("SPDK vhost socket directory: '%s' not present.", spdkVhostPath)
+
+		} else if err == nil {
+			logger := log.DefaultLogger()
+			logger.Infof("SPDK vhost socket directory: '%s' is present.", spdkVhostPath)
+			initializeQEMUCmdAndQEMUArg(domain)
+			// -object memory-backend-file share=on
+			// -chardev socket,id=spdk_vhost_scsi0,path=/var/tmp/vhost.0 \
+			// -device vhost-user-scsi-pci,id=scsi0,chardev=spdk_vhost_scsi0,num_queues=2 \
+			// -chardev socket,id=spdk_vhost_blk0,path=/var/tmp/vhost.1 \
+			// -device vhost-user-blk-pci,chardev=spdk_vhost_blk0,num-queues=2
+			// -numa node,memdev=mem0
+			domain.Spec.QEMUCmd.QEMUArg = append(domain.Spec.QEMUCmd.QEMUArg,
+				// api.Arg{Value: "-object"},
+				// api.Arg{Value: "memory-backend-file,id=mem0,size=4G,mem-path=/dev/hugepages,share=on"},
+				// api.Arg{Value: "-numa"},
+				// api.Arg{Value: "node,memdev=mem0"},
+				api.Arg{Value: "-chardev"},
+				api.Arg{Value: fmt.Sprintf("socket,id=spdk_vhost_blk0,path=%s", spdkVhostPath)},
+				api.Arg{Value: "-device"},
+				api.Arg{Value: "vhost-user-blk-pci,chardev=spdk_vhost_blk0,num-queues=2"})
+		}
+
+		if _, err := os.Stat(spdkVhostPath1); os.IsNotExist(err) {
+			logger := log.DefaultLogger()
+			logger.Infof("SPDK vhost socket directory: '%s' not present.", spdkVhostPath1)
+
+		} else if err == nil {
+			logger := log.DefaultLogger()
+			logger.Infof("SPDK vhost socket directory: '%s' is present.", spdkVhostPath1)
+			initializeQEMUCmdAndQEMUArg(domain)
+			// -object memory-backend-file share=on
+			// -chardev socket,id=spdk_vhost_scsi0,path=/var/tmp/vhost.0 \
+			// -device vhost-user-scsi-pci,id=scsi0,chardev=spdk_vhost_scsi0,num_queues=2 \
+			// -chardev socket,id=spdk_vhost_blk0,path=/var/tmp/vhost.1 \
+			// -device vhost-user-blk-pci,chardev=spdk_vhost_blk0,num-queues=2
+			// -numa node,memdev=mem0
+			domain.Spec.QEMUCmd.QEMUArg = append(domain.Spec.QEMUCmd.QEMUArg,
+				// api.Arg{Value: "-object"},
+				// api.Arg{Value: "memory-backend-file,id=mem0,size=4G,mem-path=/dev/hugepages,share=on"},
+				// api.Arg{Value: "-numa"},
+				// api.Arg{Value: "node,memdev=mem0"},
+				api.Arg{Value: "-chardev"},
+				api.Arg{Value: fmt.Sprintf("socket,id=spdk_vhost_blk1,path=%s", spdkVhostPath1)},
+				api.Arg{Value: "-device"},
+				api.Arg{Value: "vhost-user-blk-pci,chardev=spdk_vhost_blk1,num-queues=2"})
+		}
+	} else {
+		logger := log.DefaultLogger()
+		logger.Infof("Will not create vhost-user-blk device, please create the tag[%s]to support SPDK vhost in kubevirt.", spdkVhostTag)
+	}
+
 	if virtLauncherLogVerbosity, err := strconv.Atoi(os.Getenv(services.ENV_VAR_VIRT_LAUNCHER_LOG_VERBOSITY)); err == nil && (virtLauncherLogVerbosity > services.EXT_LOG_VERBOSITY_THRESHOLD) {
 
 		initializeQEMUCmdAndQEMUArg(domain)
-- 
2.27.0

