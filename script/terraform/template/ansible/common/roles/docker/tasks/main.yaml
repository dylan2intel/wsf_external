#
# Apache v2 license
# Copyright (C) 2023 Intel Corporation
# SPDX-License-Identifier: Apache-2.0
#

    - name: install containerd
      include_role:
        name: containerd
      
    - name: check if docker already installed
      command: "docker {{ compose | default(false) | bool | ternary('compose version','ps') }}"
      register: docker
      ignore_errors: yes

    - name: check os
      shell:
        cmd: ". /etc/os-release; echo $ID"
        executable: /bin/bash
      register: os
      when: docker.rc != 0

    - name: install docker
      include_tasks:
        file: "install-{{ (os.stdout == 'rhel' or os.stdout == 'anolis') | ternary('centos', os.stdout) }}.yaml"
      when: docker.rc != 0

    - name: Check proxy
      shell: echo ":$http_proxy$https_proxy$no_proxy:"
      register: proxy

    - name: Check docker proxy
      stat:
        path: "{{ docker_proxy_conf }}"
      register: proxy_conf
      when: proxy != "::"
        
    - name: Ensure "{{ docker_proxy_conf | dirname }}" exists
      file:
        path: "{{ docker_proxy_conf | dirname }}"
        state: directory
        recurse: yes
      when: proxy != "::" and not proxy_conf.stat.exists

    - name: configure proxy
      shell: |
        printf "[Service]\nEnvironment=\"HTTP_PROXY=$http_proxy\" \"HTTPS_PROXY=$https_proxy\" \"NO_PROXY=$no_proxy\"\n" > {{ docker_proxy_conf }}
      when: proxy != "::" and not proxy_conf.stat.exists

    - name: "Check if {{ docker_daemon_json }} exists"
      stat:
        path: "{{ docker_daemon_json }}"
      register: config

    - name: "Ensure {{ docker_daemon_json | dirname }} exists"
      file:
        path: "{{ docker_daemon_json | dirname }}"
        state: directory
      when: not config.stat.exists

    - name: "Ensure {{ docker_daemon_json }} exists"
      file:
        path: "{{ docker_daemon_json }}"
        state: touch
      when: not config.stat.exists

    - name: "Ensure {{ docker_data_root }} exists"
      file:
        path: "{{ docker_data_root }}"
        state: directory
      when: not config.stat.exists

    - name: "Fetch {{ docker_daemon_json }}"
      slurp:
        src: "{{ docker_daemon_json }}"
      register: daemonjson
      when: not config.stat.exists

    - name: Merge the configuration
      set_fact:
        new_conf:
          "data-root": "{{ docker_data_root }}"
          "registry-mirrors": "{{ docker_registry_mirrors }}"
          "exec-opts": ["native.cgroupdriver=systemd"]
      when: not config.stat.exists

    - name: "Configure {{ docker_daemon_json }}"
      copy:
        content: "{{ daemonjson['content'] | b64decode | default('{}',true) | from_json | combine(new_conf, recursive=True, list_merge='append') | to_nice_json }}"
        dest: "{{ docker_daemon_json }}"
      when: not config.stat.exists

    - name: Abort if restarting docker is required
      fail:
        msg: "Failed to restart docker. Please manually sudo systemctl restart docker."
      when:
      - ansible_host in my_ip_list.split(',')
      - (not config.stat.exists) or (docker.rc != 0) or (proxy != "::" and not proxy_conf.stat.exists)

    - name: Ensure group "docker" exists
      group:
        name: docker
        state: present

    - name: Restart docker
      systemd:
        name: docker
        state: restarted
        enabled: yes
        daemon_reload: yes
      when: (not config.stat.exists) or (docker.rc != 0) or (proxy != "::" and not proxy_conf.stat.exists)
      register: systemctlrc
      until: systemctlrc is success
      retries: 10
      delay: 10

    - name: Fix /var/run/docker.sock Permission
      file:
        path: /var/run/docker.sock
        group: docker

    - name: add user to the docker group
      user:
        name: "{{ ansible_user }}"
        groups: [ docker ]
        append: yes

    - name: reset ssh connection
      meta: reset_connection

